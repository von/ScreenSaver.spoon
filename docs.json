[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "ScreenSaver:bindHotKeys(table)",
        "desc": "The method accepts a single parameter, which is a table. The keys of the table",
        "doc": "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    disable = {{\"cmd\", \"alt\"}, \"d\"},\n    enable = {{\"cmd\", \"alt\"}, \"e\"},\n    suspend = {{\"cmd\", \"alt\"}, \"s\"}\n   }\n\n\nParameters:\n * mapping - Table of action to key mappings\n\nReturns:\n * ScreenSaver object",
        "name": "bindHotKeys",
        "parameters": [
          " * mapping - Table of action to key mappings"
        ],
        "returns": [
          " * ScreenSaver object"
        ],
        "signature": "ScreenSaver:bindHotKeys(table)",
        "stripped_doc": "are strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    disable = {{\"cmd\", \"alt\"}, \"d\"},\n    enable = {{\"cmd\", \"alt\"}, \"e\"},\n    suspend = {{\"cmd\", \"alt\"}, \"s\"}\n   }",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:debug(enable)",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "ScreenSaver:debug(enable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:disable()",
        "desc": "Disable the screensaver.",
        "doc": "Disable the screensaver.\n\nParameters:\n* None\n\nReturns:\n* true on sucess, false on error",
        "name": "disable",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* true on sucess, false on error"
        ],
        "signature": "ScreenSaver:disable()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:enable()",
        "desc": "Enable the screensaver.",
        "doc": "Enable the screensaver.\n\nParameters:\n* idleTimeout (optional): Timeout in seconds. If not provided, then the value\nsaved from the last vall to disable() will be used. If there is no saved value,\nthen ScreenSaver.defaultTimeout will be used. If provided should be one of:\n60, 120, 300, 600, 1200, 1800, 6000\n\nReturns:\n* true on sucess, false on error",
        "name": "enable",
        "parameters": [
          "* idleTimeout (optional): Timeout in seconds. If not provided, then the value",
          "saved from the last vall to disable() will be used. If there is no saved value,",
          "then ScreenSaver.defaultTimeout will be used. If provided should be one of:",
          "60, 120, 300, 600, 1200, 1800, 6000"
        ],
        "returns": [
          "* true on sucess, false on error"
        ],
        "signature": "ScreenSaver:enable()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:getTimeout()",
        "desc": "Return the current timeout.",
        "doc": "Return the current timeout.\n\nParameters:\n* None\n\nReturns:\n* Current timeout in seconds, nil on error",
        "name": "getTimeout",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Current timeout in seconds, nil on error"
        ],
        "signature": "ScreenSaver:getTimeout()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:init()",
        "desc": "Initializes a ScreenSaver",
        "doc": "Initializes a ScreenSaver\n\nParameters:\n * None\n\nReturns:\n * ScreenSaver object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * ScreenSaver object"
        ],
        "signature": "ScreenSaver:init()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:setTimeout()",
        "desc": "Set idle timeout for the screensaver.",
        "doc": "Set idle timeout for the screensaver.\nNote that OSX seems to only accept following values for screensaver idle delay:\n60, 120, 300, 600, 1200, 1800, 6000\nAny other values seems to cause the default of 1200 to be used.\nSet to 0 to disable screensaver.\n\nParameters:\n* timeout: Timeout in seconds.\n\nReturns:\n* true on success, false on error.",
        "name": "setTimeout",
        "parameters": [
          "* timeout: Timeout in seconds."
        ],
        "returns": [
          "* true on success, false on error."
        ],
        "signature": "ScreenSaver:setTimeout()",
        "stripped_doc": "Note that OSX seems to only accept following values for screensaver idle delay:\n60, 120, 300, 600, 1200, 1800, 6000\nAny other values seems to cause the default of 1200 to be used.\nSet to 0 to disable screensaver.",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:suspend()",
        "desc": "Suspend the screensaver.",
        "doc": "Suspend the screensaver.\n\nParameters:\n* time (optional): Suspend the screensaver for time in seconds. If not provided,\nsuspends for ScreenSaver.defaultSuspendTime.\n\nReturns:\n* true on sucess, false on error",
        "name": "suspend",
        "parameters": [
          "* time (optional): Suspend the screensaver for time in seconds. If not provided,",
          "suspends for ScreenSaver.defaultSuspendTime."
        ],
        "returns": [
          "* true on sucess, false on error"
        ],
        "signature": "ScreenSaver:suspend()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "Method": [],
    "Variable": [
      {
        "def": "ScreenSaver.defaultSuspendTime",
        "desc": "Default time to suspend screensaver for suspend() method. In seconds.",
        "doc": "Default time to suspend screensaver for suspend() method. In seconds.",
        "name": "defaultSuspendTime",
        "signature": "ScreenSaver.defaultSuspendTime",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ScreenSaver.defaultTimeout",
        "desc": "Idle timeout in seconds to be used if no value provided.",
        "doc": "Idle timeout in seconds to be used if no value provided.",
        "name": "defaultTimeout",
        "signature": "ScreenSaver.defaultTimeout",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ScreenSaver.lastTimeout",
        "desc": "Timeout that was in place when disable() called.",
        "doc": "Timeout that was in place when disable() called.",
        "name": "lastTimeout",
        "signature": "ScreenSaver.lastTimeout",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "",
    "doc": "",
    "items": [
      {
        "def": "ScreenSaver:bindHotKeys(table)",
        "desc": "The method accepts a single parameter, which is a table. The keys of the table",
        "doc": "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    disable = {{\"cmd\", \"alt\"}, \"d\"},\n    enable = {{\"cmd\", \"alt\"}, \"e\"},\n    suspend = {{\"cmd\", \"alt\"}, \"s\"}\n   }\n\n\nParameters:\n * mapping - Table of action to key mappings\n\nReturns:\n * ScreenSaver object",
        "name": "bindHotKeys",
        "parameters": [
          " * mapping - Table of action to key mappings"
        ],
        "returns": [
          " * ScreenSaver object"
        ],
        "signature": "ScreenSaver:bindHotKeys(table)",
        "stripped_doc": "are strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    disable = {{\"cmd\", \"alt\"}, \"d\"},\n    enable = {{\"cmd\", \"alt\"}, \"e\"},\n    suspend = {{\"cmd\", \"alt\"}, \"s\"}\n   }",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:debug(enable)",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "ScreenSaver:debug(enable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver.defaultSuspendTime",
        "desc": "Default time to suspend screensaver for suspend() method. In seconds.",
        "doc": "Default time to suspend screensaver for suspend() method. In seconds.",
        "name": "defaultSuspendTime",
        "signature": "ScreenSaver.defaultSuspendTime",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ScreenSaver.defaultTimeout",
        "desc": "Idle timeout in seconds to be used if no value provided.",
        "doc": "Idle timeout in seconds to be used if no value provided.",
        "name": "defaultTimeout",
        "signature": "ScreenSaver.defaultTimeout",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ScreenSaver:disable()",
        "desc": "Disable the screensaver.",
        "doc": "Disable the screensaver.\n\nParameters:\n* None\n\nReturns:\n* true on sucess, false on error",
        "name": "disable",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* true on sucess, false on error"
        ],
        "signature": "ScreenSaver:disable()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:enable()",
        "desc": "Enable the screensaver.",
        "doc": "Enable the screensaver.\n\nParameters:\n* idleTimeout (optional): Timeout in seconds. If not provided, then the value\nsaved from the last vall to disable() will be used. If there is no saved value,\nthen ScreenSaver.defaultTimeout will be used. If provided should be one of:\n60, 120, 300, 600, 1200, 1800, 6000\n\nReturns:\n* true on sucess, false on error",
        "name": "enable",
        "parameters": [
          "* idleTimeout (optional): Timeout in seconds. If not provided, then the value",
          "saved from the last vall to disable() will be used. If there is no saved value,",
          "then ScreenSaver.defaultTimeout will be used. If provided should be one of:",
          "60, 120, 300, 600, 1200, 1800, 6000"
        ],
        "returns": [
          "* true on sucess, false on error"
        ],
        "signature": "ScreenSaver:enable()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:getTimeout()",
        "desc": "Return the current timeout.",
        "doc": "Return the current timeout.\n\nParameters:\n* None\n\nReturns:\n* Current timeout in seconds, nil on error",
        "name": "getTimeout",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Current timeout in seconds, nil on error"
        ],
        "signature": "ScreenSaver:getTimeout()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:init()",
        "desc": "Initializes a ScreenSaver",
        "doc": "Initializes a ScreenSaver\n\nParameters:\n * None\n\nReturns:\n * ScreenSaver object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * ScreenSaver object"
        ],
        "signature": "ScreenSaver:init()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ScreenSaver.lastTimeout",
        "desc": "Timeout that was in place when disable() called.",
        "doc": "Timeout that was in place when disable() called.",
        "name": "lastTimeout",
        "signature": "ScreenSaver.lastTimeout",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ScreenSaver:setTimeout()",
        "desc": "Set idle timeout for the screensaver.",
        "doc": "Set idle timeout for the screensaver.\nNote that OSX seems to only accept following values for screensaver idle delay:\n60, 120, 300, 600, 1200, 1800, 6000\nAny other values seems to cause the default of 1200 to be used.\nSet to 0 to disable screensaver.\n\nParameters:\n* timeout: Timeout in seconds.\n\nReturns:\n* true on success, false on error.",
        "name": "setTimeout",
        "parameters": [
          "* timeout: Timeout in seconds."
        ],
        "returns": [
          "* true on success, false on error."
        ],
        "signature": "ScreenSaver:setTimeout()",
        "stripped_doc": "Note that OSX seems to only accept following values for screensaver idle delay:\n60, 120, 300, 600, 1200, 1800, 6000\nAny other values seems to cause the default of 1200 to be used.\nSet to 0 to disable screensaver.",
        "type": "Function"
      },
      {
        "def": "ScreenSaver:suspend()",
        "desc": "Suspend the screensaver.",
        "doc": "Suspend the screensaver.\n\nParameters:\n* time (optional): Suspend the screensaver for time in seconds. If not provided,\nsuspends for ScreenSaver.defaultSuspendTime.\n\nReturns:\n* true on sucess, false on error",
        "name": "suspend",
        "parameters": [
          "* time (optional): Suspend the screensaver for time in seconds. If not provided,",
          "suspends for ScreenSaver.defaultSuspendTime."
        ],
        "returns": [
          "* true on sucess, false on error"
        ],
        "signature": "ScreenSaver:suspend()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "name": "ScreenSaver",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  }
]